// api/verify-braintree-batch.js
// Solo usar en SANDBOX. Este endpoint acepta datos sensibles (PAN/CVV).
// ‚ö†Ô∏è No usar en producci√≥n sin tokenizaci√≥n y cumplimiento PCI DSS.

const braintree = require("braintree");

const gateway = new braintree.BraintreeGateway({
  environment: braintree.Environment.Sandbox,
  merchantId: process.env.BRAINTREE_MERCHANT_ID,
  publicKey: process.env.BRAINTREE_PUBLIC_KEY,
  privateKey: process.env.BRAINTREE_PRIVATE_KEY
});

module.exports = async (req, res) => {
  if (req.method !== "POST") {
    return res.status(405).json({ ok: false, msg: "M√©todo no permitido" });
  }

  try {
    // Parseamos el body manualmente si Vercel no lo hace
    const contentType = req.headers['content-type'] || '';
    let body = req.body;

    if (!body || typeof body !== 'object') {
      try {
        const buffers = [];
        for await (const chunk of req) buffers.push(chunk);
        const str = Buffer.concat(buffers).toString() || '';
        body = str ? JSON.parse(str) : {};
      } catch {
        body = body || {};
      }
    }

    const cards = Array.isArray(body.cards)
      ? body.cards
      : body.cards
      ? [body.cards]
      : null;

    if (!cards || cards.length === 0) {
      return res.status(400).json({
        ok: false,
        msg: "Debe enviar 'cards' como array (ej: { cards: ['4111...|MM|YYYY|CVV'] })"
      });
    }

    // üîπ NUEVO: Permitimos hasta 100 tarjetas
    const batch = cards.slice(0, 100);

    const resultados = [];

    for (const c of batch) {
      let number, expMonth, expYear, cvv;

      if (typeof c === "string") {
        const parts = c.split("|").map((p) => p.trim());
        number = parts[0] || "";
        expMonth = parts[1] || "";
        expYear = parts[2] || "";
        cvv = parts[3] || "";
      } else if (typeof c === "object" && c !== null) {
        number = c.number || c.pan || "";
        expMonth = c.expMonth || c.month || "";
        expYear = c.expYear || c.year || "";
        cvv = c.cvv || c.cvc || "";
      } else {
        resultados.push({
          input: c,
          masked: null,
          estado: "‚ùå Entrada inv√°lida",
          ok: false
        });
        continue;
      }

      number = String(number || "").replace(/\s+/g, "");
      expMonth = String(expMonth || "").replace(/\s+/g, "");
      expYear = String(expYear || "").replace(/\s+/g, "");

      if (
        !/^\d{13,19}$/.test(number) ||
        !/^\d{1,2}$/.test(expMonth) ||
        !/^\d{2,4}$/.test(expYear)
      ) {
        resultados.push({
          input: number,
          masked: maskPAN(number),
          estado: "‚ùå Formato inv√°lido",
          ok: false
        });
        continue;
      }

      try {
        const r = await gateway.creditCard.create({
          number,
          expirationMonth: expMonth,
          expirationYear: expYear,
          cvv,
          options: { verifyCard: true }
        });

        if (r && r.success) {
          const ver =
            r.creditCard.verification ||
            (r.creditCard.verifications && r.creditCard.verifications[0]);
          resultados.push({
            input: number,
            masked: maskPAN(number),
            estado: "‚úÖ Live | Aprobada",
            detalle: ver
              ? ver.processorResponseText || ver.status
              : "Verificada correctamente",
            ok: true
          });
        } else {
          resultados.push({
            input: number,
            masked: maskPAN(number),
            estado: "‚ùå Dead | Rechazada",
            detalle: r && r.message ? r.message : "Tarjeta no v√°lida",
            ok: false
          });
        }
      } catch (err) {
        resultados.push({
          input: number,
          masked: maskPAN(number),
          estado: "‚ö†Ô∏è Error interno",
          detalle: String(err && (err.message || err)),
          ok: false
        });
      }
    }

    return res.status(200).json({
      ok: true,
      total: resultados.length,
      resultados
    });
  } catch (err) {
    console.error("Error general:", err);
    return res
      .status(500)
      .json({ ok: false, msg: "Error interno del servidor" });
  }
};

function maskPAN(pan) {
  const s = String(pan || "").replace(/\D/g, "");
  if (!s) return "";
  if (s.length <= 10) return s.replace(/\d/g, "*");
  const first6 = s.slice(0, 6);
  const last4 = s.slice(-4);
  const middle = "*".repeat(Math.max(0, s.length - 10));
  return `${first6}${middle}${last4}`;
}
